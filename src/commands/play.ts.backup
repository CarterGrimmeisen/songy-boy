import { CommandInteraction, MessageActionRow } from 'discord.js'
import { Discord, Guard, Slash, SlashOption } from 'discordx'
import { Queue, Song } from 'distube'

import { distube } from '..'
import { pauseButton, skipButton, stopButton } from '../controls/mediaControls'
import { addedToQueueEmbed } from '../embeds/addedToQueue'
import { nowPlayingEmbed } from '../embeds/nowPlaying'
import voiceChannelGuards from '../guards/voiceChannel'
import { getInteractionInfo } from '../util'

@Discord()
export class Play {
    @Slash('play', { description: 'Play a song either via search terms or url' })
    @Guard(...voiceChannelGuards)
    async default(
        @SlashOption('query', { required: true, description: 'The search terms or URL to play' })
        query: string,
        interaction: CommandInteraction,
    ) {
        const [member, voiceChannel] = await getInteractionInfo(interaction)
        distube.playVoiceChannel(voiceChannel!, query, { member })
        interaction.reply(`Searching for "${query}"...`)

        const updatePlayingSong = (queue: Queue, song: Song) => {
            distube.once('finish', () => {
                distube.off('playSong', updatePlayingSong)
            })

            if (queue.voiceChannel?.guildId !== voiceChannel?.guildId) return
            if (queue.songs.length !== 1) {
                interaction.editReply({
                    content: null,
                    embeds: [nowPlayingEmbed(member, song)],
                    components: [new MessageActionRow({ components: [pauseButton, stopButton, skipButton] })],
                })
            } else {
                interaction.editReply({
                    content: null,
                    embeds: [addedToQueueEmbed(member, song)],
                })
            }
        }
        distube.on('playSong', updatePlayingSong)
    }
}
